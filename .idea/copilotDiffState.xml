<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/application/pos/POSController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/application/pos/POSController.java" />
              <option name="originalContent" value="package application.pos;&#10;&#10;import domain.billing.Bill;&#10;import domain.billing.BillLine;&#10;import domain.billing.BillNumberGenerator;&#10;import domain.billing.BillWriter;&#10;import domain.common.Money;&#10;import domain.inventory.InventoryReservation;&#10;import domain.inventory.BatchDiscount; // Add this import&#10;import ports.in.InventoryService;&#10;import application.inventory.InventoryAdminService;&#10;import domain.payment.CashPayment;&#10;import domain.payment.CardPayment;&#10;import domain.payment.Payment;&#10;import domain.pricing.DiscountPolicy;&#10;import application.pricing.PricingService;&#10;import application.pricing.AutoDiscountService;&#10;import ports.out.BillRepository;&#10;&#10;import application.events.EventBus;&#10;import application.events.NoopEventBus;&#10;import application.events.events.BillPaid;&#10;import application.events.events.RestockThresholdHit;&#10;import application.events.events.StockDepleted;&#10;&#10;import java.util.ArrayList;&#10;import java.util.LinkedHashSet;&#10;import java.util.List;&#10;import java.util.Optional;&#10;import java.util.Set;&#10;&#10;public final class POSController {&#10;    private final InventoryService inventory;&#10;    private final InventoryAdminService inventoryAdmin;&#10;    private final PricingService pricing;&#10;    private final BillNumberGenerator billNos;&#10;    private final BillRepository bills;&#10;    private final BillWriter writer;&#10;    private final EventBus events; // Observer&#10;    private final AutoDiscountService autoDiscountService; // New: Automatic discount detection&#10;&#10;    private Bill active = null;&#10;    private DiscountPolicy activeDiscount = null;&#10;&#10;    private final List&lt;InventoryReservation&gt; shelfReservations = new ArrayList&lt;&gt;();&#10;    private final List&lt;InventoryReservation&gt; storeReservations = new ArrayList&lt;&gt;();&#10;&#10;    private Payment.Receipt paymentReceipt = null;&#10;&#10;    private String currentUser = &quot;operator&quot;;&#10;    private String currentChannel = &quot;POS&quot;;&#10;&#10;    public POSController(InventoryService inv, PricingService pr, BillNumberGenerator gen, BillRepository br, BillWriter bw) {&#10;        this(inv, null, pr, gen, br, bw, new NoopEventBus());&#10;    }&#10;&#10;    public POSController(InventoryService inv, InventoryAdminService invAdmin, PricingService pr, BillNumberGenerator gen, BillRepository br, BillWriter bw) {&#10;        this(inv, invAdmin, pr, gen, br, bw, new NoopEventBus());&#10;    }&#10;&#10;    public POSController(InventoryService inv, InventoryAdminService invAdmin, PricingService pr, BillNumberGenerator gen, BillRepository br, BillWriter bw, EventBus events) {&#10;        this.inventory = inv;&#10;        this.inventoryAdmin = invAdmin;&#10;        this.pricing = pr;&#10;        this.billNos = gen;&#10;        this.bills = br;&#10;        this.writer = bw;&#10;        this.events = (events == null) ? new NoopEventBus() : events;&#10;        this.autoDiscountService = new AutoDiscountService(inventoryAdmin); // Pass inventoryAdmin for batch discounts&#10;    }&#10;&#10;    public void setUser(String user) {&#10;        this.currentUser = (user == null || user.isBlank()) ? &quot;operator&quot; : user.trim();&#10;        if (active != null) active.setUserName(this.currentUser);&#10;    }&#10;    public void setChannel(String channel) {&#10;        this.currentChannel = (channel == null || channel.isBlank()) ? &quot;POS&quot; : channel.trim().toUpperCase();&#10;        if (active != null) active.setChannel(this.currentChannel);&#10;    }&#10;&#10;    public void newBill() {&#10;        // Allow starting a new bill even if one is active (reset state)&#10;        active = new Bill(billNos.next());&#10;        active.setUserName(currentUser);&#10;        active.setChannel(currentChannel);&#10;&#10;        shelfReservations.clear();&#10;        storeReservations.clear();&#10;        activeDiscount = null;&#10;        paymentReceipt = null;&#10;    }&#10;&#10;    public void addItem(String code, int qty) {&#10;        ensure();&#10;        var res = inventory.reserveByChannel(code, qty, currentChannel);&#10;        if (&quot;POS&quot;.equalsIgnoreCase(currentChannel)) {&#10;            storeReservations.addAll(res);&#10;        } else {&#10;            shelfReservations.addAll(res);&#10;        }&#10;&#10;        // Calculate the best price considering batch discounts&#10;        Money effectivePrice = calculateBestPriceFromReservations(code, res);&#10;&#10;        var line = new BillLine(code, inventory.itemName(code), effectivePrice, qty, res);&#10;        active.addLine(line);&#10;&#10;        // Auto-detect and apply the best available discount after adding the item&#10;        autoApplyBestDiscount();&#10;    }&#10;&#10;    public InventoryService.SmartPick addItemSmart(String code, int qty,&#10;                                                   boolean approveUseOtherSide,&#10;                                                   boolean managerApprovedBackfill) {&#10;        ensure();&#10;        var pick = inventory.reserveSmart(code, qty, currentChannel, approveUseOtherSide, managerApprovedBackfill);&#10;&#10;        shelfReservations.addAll(pick.shelfReservations);&#10;        storeReservations.addAll(pick.storeReservations);&#10;&#10;        var combined = new ArrayList&lt;InventoryReservation&gt;(pick.shelfReservations.size() + pick.storeReservations.size());&#10;        combined.addAll(pick.shelfReservations);&#10;        combined.addAll(pick.storeReservations);&#10;&#10;        // Calculate the best price considering batch discounts&#10;        Money effectivePrice = calculateBestPriceFromReservations(code, combined);&#10;&#10;        var line = new BillLine(code, inventory.itemName(code), effectivePrice, qty, combined);&#10;        active.addLine(line);&#10;&#10;        // Auto-detect and apply the best available discount after adding the item&#10;        autoApplyBestDiscount();&#10;&#10;        return pick;&#10;    }&#10;&#10;    /**&#10;     * Automatically detects and applies batch-specific discounts for the current bill&#10;     */&#10;    private void autoApplyBestDiscount() {&#10;        if (active == null || active.lines().isEmpty()) {&#10;            return;&#10;        }&#10;&#10;        // Detect batch-specific discounts from the inventory admin service&#10;        DiscountPolicy batchDiscount = autoDiscountService.detectBatchDiscounts(active);&#10;&#10;        // Apply batch discounts if found&#10;        if (batchDiscount != null) {&#10;            activeDiscount = batchDiscount;&#10;&#10;            // Calculate the actual discount amount for display by comparing original vs current prices&#10;            Money actualDiscount = calculateActualBatchDiscountAmount();&#10;            if (actualDiscount.compareTo(Money.ZERO) &gt; 0) {&#10;                System.out.println(&quot; Batch Discount Applied - You save: &quot; + actualDiscount);&#10;            }&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Calculate the actual batch discount amount by comparing original prices with discounted line prices&#10;     */&#10;    private Money calculateActualBatchDiscountAmount() {&#10;        Money totalOriginalPrice = Money.ZERO;&#10;        Money totalDiscountedPrice = Money.ZERO;&#10;&#10;        for (BillLine line : active.lines()) {&#10;            Money originalPrice = inventory.priceOf(line.itemCode());&#10;            totalOriginalPrice = totalOriginalPrice.plus(originalPrice.multiply(line.quantity()));&#10;            totalDiscountedPrice = totalDiscountedPrice.plus(line.lineTotal());&#10;        }&#10;&#10;        return totalOriginalPrice.minus(totalDiscountedPrice);&#10;    }&#10;&#10;    public void removeItem(String code) {&#10;        ensure();&#10;        active.removeLineByCode(code);&#10;&#10;        // Re-evaluate discounts after removing an item&#10;        autoApplyBestDiscount();&#10;    }&#10;&#10;    public void applyDiscount(DiscountPolicy p) {&#10;        ensure();&#10;        activeDiscount = p;&#10;    }&#10;&#10;    public Money total() {&#10;        ensure();&#10;        ensureItemsAdded();&#10;        pricing.finalizePricing(active, activeDiscount);&#10;        return active.total();&#10;    }&#10;&#10;    public void payCash(double amount) {&#10;        ensure();&#10;        pricing.finalizePricing(active, activeDiscount);&#10;        var cash = new CashPayment();&#10;        this.paymentReceipt = cash.pay(active.total(), Money.of(amount));&#10;        active.setPayment(paymentReceipt);&#10;    }&#10;&#10;    public void payCard(String last4) {&#10;        ensure();&#10;        pricing.finalizePricing(active, activeDiscount);&#10;        var card = new CardPayment(last4);&#10;        this.paymentReceipt = card.pay(active.total(), active.total());&#10;        active.setPayment(paymentReceipt);&#10;    }&#10;&#10;    public void checkoutCash(double amount) {&#10;        ensure();&#10;        ensureItemsAdded();&#10;        pricing.finalizePricing(active, activeDiscount);&#10;        var cash = new CashPayment();&#10;        this.paymentReceipt = cash.pay(active.total(), Money.of(amount));&#10;        active.setPayment(paymentReceipt);&#10;        persistAndReset();&#10;    }&#10;&#10;    public void checkoutCard(String last4) {&#10;        ensure();&#10;        ensureItemsAdded();&#10;        pricing.finalizePricing(active, activeDiscount);&#10;        var card = new CardPayment(last4);&#10;        this.paymentReceipt = card.pay(active.total(), active.total());&#10;        active.setPayment(paymentReceipt);&#10;        persistAndReset();&#10;    }&#10;&#10;    public void checkout() {&#10;        ensure();&#10;        ensureItemsAdded();&#10;        pricing.finalizePricing(active, activeDiscount);&#10;        if (paymentReceipt == null) throw new IllegalStateException(&quot;Payment not completed&quot;);&#10;        persistAndReset();&#10;    }&#10;&#10;    private void persistAndReset() {&#10;        active.setUserName(currentUser);&#10;        active.setChannel(currentChannel);&#10;&#10;        bills.saveBill(active);&#10;        writer.write(active);&#10;&#10;        if (!shelfReservations.isEmpty()) inventory.commitReservation(shelfReservations);&#10;        if (!storeReservations.isEmpty()) inventory.commitStoreReservation(storeReservations);&#10;&#10;        events.publish(new BillPaid(active.number(), active.total(), currentChannel, currentUser));&#10;&#10;        // dedupe item codes in this bill&#10;        Set&lt;String&gt; codes = new LinkedHashSet&lt;&gt;();&#10;        for (BillLine l : active.lines()) codes.add(l.itemCode());&#10;        for (String code : codes) {&#10;            int shelf = inventory.shelfQty(code);&#10;            int store = inventory.storeQty(code);&#10;            int totalLeft = shelf + store;&#10;            int threshold = Math.max(50, inventory.restockLevel(code));&#10;            if (totalLeft == 0) {&#10;                events.publish(new StockDepleted(code));&#10;            } else if (totalLeft &lt;= threshold) {&#10;                events.publish(new RestockThresholdHit(code, totalLeft, threshold));&#10;            }&#10;        }&#10;&#10;        active = null;&#10;        shelfReservations.clear();&#10;        storeReservations.clear();&#10;        activeDiscount = null;&#10;        paymentReceipt = null;&#10;    }&#10;&#10;    private void ensure() {&#10;        if (active == null) throw new IllegalStateException(&quot;No active bill&quot;);&#10;    }&#10;&#10;    private void ensureItemsAdded() {&#10;        if (active == null || active.lines().isEmpty()) {&#10;            throw new IllegalStateException(&quot;Cannot proceed: No items have been added to the bill&quot;);&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Calculate the best (lowest) price from all reserved batches, considering any active discounts&#10;     */&#10;    private Money calculateBestPriceFromReservations(String itemCode, List&lt;InventoryReservation&gt; reservations) {&#10;        Money basePrice = inventory.priceOf(itemCode);&#10;        Money bestPrice = basePrice;&#10;&#10;        // Apply batch discounts only for in-store POS channel&#10;        if (!&quot;POS&quot;.equalsIgnoreCase(currentChannel)) {&#10;            System.out.println(&quot;⚠️ Batch discounts only apply to POS channel. Current channel: &quot; + currentChannel);&#10;            return basePrice;&#10;        }&#10;&#10;        // If no inventory admin service available (backward compatibility), use base price&#10;        if (inventoryAdmin == null) {&#10;            System.out.println(&quot;⚠️ InventoryAdminService not available - no batch discounts&quot;);&#10;            return basePrice;&#10;        }&#10;&#10;        System.out.println(&quot; Checking batch discounts for item: &quot; + itemCode + &quot; (Base price: LKR &quot; +&#10;            String.format(&quot;%.2f&quot;, basePrice.asBigDecimal().doubleValue()) + &quot;)&quot;);&#10;&#10;        // Check each batch for discounts and find the best price&#10;        boolean foundDiscount = false;&#10;        Money maxSavings = Money.ZERO;&#10;&#10;        for (InventoryReservation reservation : reservations) {&#10;            System.out.println(&quot;   Checking batch ID: &quot; + reservation.batchId);&#10;            Money batchPrice = inventoryAdmin.calculateDiscountedPrice(itemCode, reservation.batchId);&#10;&#10;            if (batchPrice.compareTo(bestPrice) &lt; 0) {&#10;                Money savings = basePrice.minus(batchPrice);  // Calculate savings from original base price&#10;                if (savings.compareTo(maxSavings) &gt; 0) {&#10;                    maxSavings = savings;&#10;                }&#10;                bestPrice = batchPrice;&#10;                foundDiscount = true;&#10;                System.out.println(&quot;   ✅ Discounted price found: LKR &quot; +&#10;                    String.format(&quot;%.2f&quot;, batchPrice.asBigDecimal().doubleValue()) +&#10;                    &quot; (Save: LKR &quot; + String.format(&quot;%.2f&quot;, savings.asBigDecimal().doubleValue()) + &quot;)&quot;);&#10;            } else {&#10;                System.out.println(&quot;   ❌ No discount for batch &quot; + reservation.batchId +&#10;                    &quot; (Price: LKR &quot; + String.format(&quot;%.2f&quot;, batchPrice.asBigDecimal().doubleValue()) + &quot;)&quot;);&#10;            }&#10;        }&#10;&#10;        // Display discount information immediately when found&#10;        if (foundDiscount &amp;&amp; maxSavings.compareTo(Money.ZERO) &gt; 0) {&#10;            System.out.println(&quot; Batch Discount Applied - You save: LKR &quot; +&#10;                String.format(&quot;%.2f&quot;, maxSavings.asBigDecimal().doubleValue()));&#10;        } else {&#10;            System.out.println(&quot;ℹ️ No batch discounts available for &quot; + itemCode);&#10;        }&#10;&#10;        return bestPrice;&#10;    }&#10;&#10;    /**&#10;     * Gets information about the currently applied discount&#10;     */&#10;    public String getCurrentDiscountInfo() {&#10;        if (active == null || activeDiscount == null) {&#10;            return &quot;No discount applied&quot;;&#10;        }&#10;&#10;        // For batch discounts, calculate the actual discount amount&#10;        if (&quot;BATCH_DISCOUNT&quot;.equals(activeDiscount.code())) {&#10;            Money actualDiscount = calculateActualBatchDiscountAmount();&#10;            return &quot;Current Discount: BATCH_DISCOUNTS (Saves: &quot; + actualDiscount + &quot;)&quot;;&#10;        }&#10;&#10;        // For other discount types, use the computed discount&#10;        Money discountAmount = activeDiscount.computeDiscount(active);&#10;        return &quot;Current Discount: &quot; + activeDiscount.code() + &quot; (Saves: &quot; + discountAmount + &quot;)&quot;;&#10;    }&#10;&#10;    /**&#10;     * Gets a list of all batch discounts for the current bill&#10;     */&#10;    public List&lt;String&gt; getAvailableDiscounts() {&#10;        if (active == null) {&#10;            return List.of(&quot;No active bill&quot;);&#10;        }&#10;&#10;        List&lt;String&gt; discountDescriptions = new ArrayList&lt;&gt;();&#10;&#10;        for (BillLine line : active.lines()) {&#10;            for (InventoryReservation reservation : line.reservations()) {&#10;                Optional&lt;BatchDiscount&gt; discount = inventoryAdmin.findActiveBatchDiscount(reservation.batchId);&#10;                if (discount.isPresent() &amp;&amp; discount.get().isValidNow()) {&#10;                    String description = String.format(&quot;%s: %s&quot;,&#10;                        line.itemName(),&#10;                        discount.get().getDescription());&#10;                    if (!discountDescriptions.contains(description)) {&#10;                        discountDescriptions.add(description);&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        if (discountDescriptions.isEmpty()) {&#10;            return List.of(&quot;No batch discounts available&quot;);&#10;        }&#10;&#10;        return discountDescriptions;&#10;    }&#10;&#10;    /**&#10;     * Gets the current bill with pricing information including discounts&#10;     */&#10;    public String getCurrentBillSummary() {&#10;        if (active == null) {&#10;            return &quot;No active bill&quot;;&#10;        }&#10;&#10;        // Apply current pricing to get up-to-date totals&#10;        pricing.finalizePricing(active, activeDiscount);&#10;&#10;        StringBuilder summary = new StringBuilder();&#10;        summary.append(&quot;=== CURRENT BILL ===\n&quot;);&#10;        summary.append(&quot;Bill No: &quot;).append(active.number()).append(&quot;\n&quot;);&#10;        summary.append(&quot;Items:\n&quot;);&#10;&#10;        for (BillLine line : active.lines()) {&#10;            summary.append(&quot;  &quot;).append(line.itemCode()).append(&quot; - &quot;)&#10;                   .append(line.itemName()).append(&quot; x&quot;).append(line.quantity())&#10;                   .append(&quot; @ &quot;).append(line.unitPrice()).append(&quot; = &quot;)&#10;                   .append(line.lineTotal()).append(&quot;\n&quot;);&#10;        }&#10;&#10;        summary.append(&quot;-------------------\n&quot;);&#10;        summary.append(&quot;Subtotal: &quot;).append(active.subtotal()).append(&quot;\n&quot;);&#10;        summary.append(&quot;Discount: -&quot;).append(active.discount()).append(&quot;\n&quot;);&#10;        summary.append(&quot;Tax: &quot;).append(active.tax()).append(&quot;\n&quot;);&#10;        summary.append(&quot;TOTAL: &quot;).append(active.total()).append(&quot;\n&quot;);&#10;&#10;        if (activeDiscount != null) {&#10;            summary.append(&quot;Applied Discount: &quot;).append(activeDiscount.code()).append(&quot;\n&quot;);&#10;        }&#10;&#10;        List&lt;String&gt; availableDiscounts = getAvailableDiscounts();&#10;        if (!availableDiscounts.isEmpty()) {&#10;            summary.append(&quot;Available Discounts:\n&quot;);&#10;            for (String discount : availableDiscounts) {&#10;                summary.append(&quot;  • &quot;).append(discount).append(&quot;\n&quot;);&#10;            }&#10;        }&#10;&#10;        return summary.toString();&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package application.pos;&#10;&#10;import domain.billing.Bill;&#10;import domain.billing.BillLine;&#10;import domain.billing.BillNumberGenerator;&#10;import domain.billing.BillWriter;&#10;import domain.common.Money;&#10;import domain.inventory.InventoryReservation;&#10;import domain.inventory.BatchDiscount; // Add this import&#10;import ports.in.InventoryService;&#10;import application.inventory.InventoryAdminService;&#10;import domain.payment.CashPayment;&#10;import domain.payment.CardPayment;&#10;import domain.payment.Payment;&#10;import domain.pricing.DiscountPolicy;&#10;import application.pricing.PricingService;&#10;import application.pricing.AutoDiscountService;&#10;import ports.out.BillRepository;&#10;&#10;import application.events.EventBus;&#10;import application.events.NoopEventBus;&#10;import application.events.events.BillPaid;&#10;import application.events.events.RestockThresholdHit;&#10;import application.events.events.StockDepleted;&#10;&#10;import java.util.ArrayList;&#10;import java.util.LinkedHashSet;&#10;import java.util.List;&#10;import java.util.Optional;&#10;import java.util.Set;&#10;&#10;public final class POSController {&#10;    private final InventoryService inventory;&#10;    private final InventoryAdminService inventoryAdmin;&#10;    private final PricingService pricing;&#10;    private final BillNumberGenerator billNos;&#10;    private final BillRepository bills;&#10;    private final BillWriter writer;&#10;    private final EventBus events; // Observer&#10;    private final AutoDiscountService autoDiscountService; // New: Automatic discount detection&#10;&#10;    private Bill active = null;&#10;    private DiscountPolicy activeDiscount = null;&#10;&#10;    private final List&lt;InventoryReservation&gt; shelfReservations = new ArrayList&lt;&gt;();&#10;    private final List&lt;InventoryReservation&gt; storeReservations = new ArrayList&lt;&gt;();&#10;&#10;    private Payment.Receipt paymentReceipt = null;&#10;&#10;    private String currentUser = &quot;operator&quot;;&#10;    private String currentChannel = &quot;POS&quot;;&#10;&#10;    public POSController(InventoryService inv, PricingService pr, BillNumberGenerator gen, BillRepository br, BillWriter bw) {&#10;        this(inv, null, pr, gen, br, bw, new NoopEventBus());&#10;    }&#10;&#10;    public POSController(InventoryService inv, InventoryAdminService invAdmin, PricingService pr, BillNumberGenerator gen, BillRepository br, BillWriter bw) {&#10;        this(inv, invAdmin, pr, gen, br, bw, new NoopEventBus());&#10;    }&#10;&#10;    public POSController(InventoryService inv, InventoryAdminService invAdmin, PricingService pr, BillNumberGenerator gen, BillRepository br, BillWriter bw, EventBus events) {&#10;        this.inventory = inv;&#10;        this.inventoryAdmin = invAdmin;&#10;        this.pricing = pr;&#10;        this.billNos = gen;&#10;        this.bills = br;&#10;        this.writer = bw;&#10;        this.events = (events == null) ? new NoopEventBus() : events;&#10;        this.autoDiscountService = new AutoDiscountService(inventoryAdmin); // Pass inventoryAdmin for batch discounts&#10;    }&#10;&#10;    public void setUser(String user) {&#10;        this.currentUser = (user == null || user.isBlank()) ? &quot;operator&quot; : user.trim();&#10;        if (active != null) active.setUserName(this.currentUser);&#10;    }&#10;    public void setChannel(String channel) {&#10;        this.currentChannel = (channel == null || channel.isBlank()) ? &quot;POS&quot; : channel.trim().toUpperCase();&#10;        if (active != null) active.setChannel(this.currentChannel);&#10;    }&#10;&#10;    public void newBill() {&#10;        // Allow starting a new bill even if one is active (reset state)&#10;        active = new Bill(billNos.next());&#10;        active.setUserName(currentUser);&#10;        active.setChannel(currentChannel);&#10;&#10;        shelfReservations.clear();&#10;        storeReservations.clear();&#10;        activeDiscount = null;&#10;        paymentReceipt = null;&#10;    }&#10;&#10;    public void addItem(String code, int qty) {&#10;        ensure();&#10;        var res = inventory.reserveByChannel(code, qty, currentChannel);&#10;        if (&quot;POS&quot;.equalsIgnoreCase(currentChannel)) {&#10;            storeReservations.addAll(res);&#10;        } else {&#10;            shelfReservations.addAll(res);&#10;        }&#10;&#10;        // Calculate the best price considering batch discounts&#10;        Money effectivePrice = calculateBestPriceFromReservations(code, res);&#10;&#10;        var line = new BillLine(code, inventory.itemName(code), effectivePrice, qty, res);&#10;        active.addLine(line);&#10;&#10;        // Auto-detect and apply the best available discount after adding the item&#10;        autoApplyBestDiscount();&#10;    }&#10;&#10;    public InventoryService.SmartPick addItemSmart(String code, int qty,&#10;                                                   boolean approveUseOtherSide,&#10;                                                   boolean managerApprovedBackfill) {&#10;        ensure();&#10;        var pick = inventory.reserveSmart(code, qty, currentChannel, approveUseOtherSide, managerApprovedBackfill);&#10;&#10;        shelfReservations.addAll(pick.shelfReservations);&#10;        storeReservations.addAll(pick.storeReservations);&#10;&#10;        var combined = new ArrayList&lt;InventoryReservation&gt;(pick.shelfReservations.size() + pick.storeReservations.size());&#10;        combined.addAll(pick.shelfReservations);&#10;        combined.addAll(pick.storeReservations);&#10;&#10;        // Calculate the best price considering batch discounts&#10;        Money effectivePrice = calculateBestPriceFromReservations(code, combined);&#10;&#10;        var line = new BillLine(code, inventory.itemName(code), effectivePrice, qty, combined);&#10;        active.addLine(line);&#10;&#10;        // Auto-detect and apply the best available discount after adding the item&#10;        autoApplyBestDiscount();&#10;&#10;        return pick;&#10;    }&#10;&#10;    /**&#10;     * Automatically detects and applies batch-specific discounts for the current bill&#10;     */&#10;    private void autoApplyBestDiscount() {&#10;        if (active == null || active.lines().isEmpty()) {&#10;            return;&#10;        }&#10;&#10;        // Detect batch-specific discounts from the inventory admin service&#10;        DiscountPolicy batchDiscount = autoDiscountService.detectBatchDiscounts(active);&#10;&#10;        // Apply batch discounts if found&#10;        if (batchDiscount != null) {&#10;            activeDiscount = batchDiscount;&#10;&#10;            // Calculate and display the total discount amount for the most recently added line&#10;            BillLine lastLine = active.lines().get(active.lines().size() - 1);&#10;            Money originalLineTotal = inventory.priceOf(lastLine.itemCode()).multiply(lastLine.quantity());&#10;            Money discountedLineTotal = lastLine.lineTotal();&#10;            Money lineSavings = originalLineTotal.minus(discountedLineTotal);&#10;            &#10;            if (lineSavings.compareTo(Money.ZERO) &gt; 0) {&#10;                System.out.println(&quot; Batch Discount Applied - Total savings for &quot; + lastLine.quantity() + &#10;                    &quot; items: LKR &quot; + String.format(&quot;%.2f&quot;, lineSavings.asBigDecimal().doubleValue()));&#10;            }&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Calculate the actual batch discount amount by comparing original prices with discounted line prices&#10;     */&#10;    private Money calculateActualBatchDiscountAmount() {&#10;        Money totalOriginalPrice = Money.ZERO;&#10;        Money totalDiscountedPrice = Money.ZERO;&#10;&#10;        for (BillLine line : active.lines()) {&#10;            Money originalPrice = inventory.priceOf(line.itemCode());&#10;            totalOriginalPrice = totalOriginalPrice.plus(originalPrice.multiply(line.quantity()));&#10;            totalDiscountedPrice = totalDiscountedPrice.plus(line.lineTotal());&#10;        }&#10;&#10;        return totalOriginalPrice.minus(totalDiscountedPrice);&#10;    }&#10;&#10;    public void removeItem(String code) {&#10;        ensure();&#10;        active.removeLineByCode(code);&#10;&#10;        // Re-evaluate discounts after removing an item&#10;        autoApplyBestDiscount();&#10;    }&#10;&#10;    public void applyDiscount(DiscountPolicy p) {&#10;        ensure();&#10;        activeDiscount = p;&#10;    }&#10;&#10;    public Money total() {&#10;        ensure();&#10;        ensureItemsAdded();&#10;        pricing.finalizePricing(active, activeDiscount);&#10;        return active.total();&#10;    }&#10;&#10;    public void payCash(double amount) {&#10;        ensure();&#10;        pricing.finalizePricing(active, activeDiscount);&#10;        var cash = new CashPayment();&#10;        this.paymentReceipt = cash.pay(active.total(), Money.of(amount));&#10;        active.setPayment(paymentReceipt);&#10;    }&#10;&#10;    public void payCard(String last4) {&#10;        ensure();&#10;        pricing.finalizePricing(active, activeDiscount);&#10;        var card = new CardPayment(last4);&#10;        this.paymentReceipt = card.pay(active.total(), active.total());&#10;        active.setPayment(paymentReceipt);&#10;    }&#10;&#10;    public void checkoutCash(double amount) {&#10;        ensure();&#10;        ensureItemsAdded();&#10;        pricing.finalizePricing(active, activeDiscount);&#10;        var cash = new CashPayment();&#10;        this.paymentReceipt = cash.pay(active.total(), Money.of(amount));&#10;        active.setPayment(paymentReceipt);&#10;        persistAndReset();&#10;    }&#10;&#10;    public void checkoutCard(String last4) {&#10;        ensure();&#10;        ensureItemsAdded();&#10;        pricing.finalizePricing(active, activeDiscount);&#10;        var card = new CardPayment(last4);&#10;        this.paymentReceipt = card.pay(active.total(), active.total());&#10;        active.setPayment(paymentReceipt);&#10;        persistAndReset();&#10;    }&#10;&#10;    public void checkout() {&#10;        ensure();&#10;        ensureItemsAdded();&#10;        pricing.finalizePricing(active, activeDiscount);&#10;        if (paymentReceipt == null) throw new IllegalStateException(&quot;Payment not completed&quot;);&#10;        persistAndReset();&#10;    }&#10;&#10;    private void persistAndReset() {&#10;        active.setUserName(currentUser);&#10;        active.setChannel(currentChannel);&#10;&#10;        bills.saveBill(active);&#10;        writer.write(active);&#10;&#10;        if (!shelfReservations.isEmpty()) inventory.commitReservation(shelfReservations);&#10;        if (!storeReservations.isEmpty()) inventory.commitStoreReservation(storeReservations);&#10;&#10;        events.publish(new BillPaid(active.number(), active.total(), currentChannel, currentUser));&#10;&#10;        // dedupe item codes in this bill&#10;        Set&lt;String&gt; codes = new LinkedHashSet&lt;&gt;();&#10;        for (BillLine l : active.lines()) codes.add(l.itemCode());&#10;        for (String code : codes) {&#10;            int shelf = inventory.shelfQty(code);&#10;            int store = inventory.storeQty(code);&#10;            int totalLeft = shelf + store;&#10;            int threshold = Math.max(50, inventory.restockLevel(code));&#10;            if (totalLeft == 0) {&#10;                events.publish(new StockDepleted(code));&#10;            } else if (totalLeft &lt;= threshold) {&#10;                events.publish(new RestockThresholdHit(code, totalLeft, threshold));&#10;            }&#10;        }&#10;&#10;        active = null;&#10;        shelfReservations.clear();&#10;        storeReservations.clear();&#10;        activeDiscount = null;&#10;        paymentReceipt = null;&#10;    }&#10;&#10;    private void ensure() {&#10;        if (active == null) throw new IllegalStateException(&quot;No active bill&quot;);&#10;    }&#10;&#10;    private void ensureItemsAdded() {&#10;        if (active == null || active.lines().isEmpty()) {&#10;            throw new IllegalStateException(&quot;Cannot proceed: No items have been added to the bill&quot;);&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Calculate the best (lowest) price from all reserved batches, considering any active discounts&#10;     */&#10;    private Money calculateBestPriceFromReservations(String itemCode, List&lt;InventoryReservation&gt; reservations) {&#10;        Money basePrice = inventory.priceOf(itemCode);&#10;        Money bestPrice = basePrice;&#10;&#10;        // Apply batch discounts only for in-store POS channel&#10;        if (!&quot;POS&quot;.equalsIgnoreCase(currentChannel)) {&#10;            System.out.println(&quot;⚠️ Batch discounts only apply to POS channel. Current channel: &quot; + currentChannel);&#10;            return basePrice;&#10;        }&#10;&#10;        // If no inventory admin service available (backward compatibility), use base price&#10;        if (inventoryAdmin == null) {&#10;            System.out.println(&quot;⚠️ InventoryAdminService not available - no batch discounts&quot;);&#10;            return basePrice;&#10;        }&#10;&#10;        System.out.println(&quot; Checking batch discounts for item: &quot; + itemCode + &quot; (Base price: LKR &quot; +&#10;            String.format(&quot;%.2f&quot;, basePrice.asBigDecimal().doubleValue()) + &quot;)&quot;);&#10;&#10;        // Check each batch for discounts and find the best price&#10;        boolean foundDiscount = false;&#10;        Money maxSavingsPerItem = Money.ZERO;&#10;&#10;        for (InventoryReservation reservation : reservations) {&#10;            System.out.println(&quot;   Checking batch ID: &quot; + reservation.batchId);&#10;            Money batchPrice = inventoryAdmin.calculateDiscountedPrice(itemCode, reservation.batchId);&#10;&#10;            if (batchPrice.compareTo(bestPrice) &lt; 0) {&#10;                Money savings = basePrice.minus(batchPrice);  // Calculate savings from original base price&#10;                if (savings.compareTo(maxSavingsPerItem) &gt; 0) {&#10;                    maxSavingsPerItem = savings;&#10;                }&#10;                bestPrice = batchPrice;&#10;                foundDiscount = true;&#10;                System.out.println(&quot;   ✅ Discounted price found: LKR &quot; +&#10;                    String.format(&quot;%.2f&quot;, batchPrice.asBigDecimal().doubleValue()) +&#10;                    &quot; (Save: LKR &quot; + String.format(&quot;%.2f&quot;, savings.asBigDecimal().doubleValue()) + &quot; per item)&quot;);&#10;            } else {&#10;                System.out.println(&quot;   ❌ No discount for batch &quot; + reservation.batchId +&#10;                    &quot; (Price: LKR &quot; + String.format(&quot;%.2f&quot;, batchPrice.asBigDecimal().doubleValue()) + &quot;)&quot;);&#10;            }&#10;        }&#10;&#10;        // Only show discount info if found, but don't duplicate the message that will be shown later&#10;        if (!foundDiscount) {&#10;            System.out.println(&quot;ℹ️ No batch discounts available for &quot; + itemCode);&#10;        }&#10;&#10;        return bestPrice;&#10;    }&#10;&#10;    /**&#10;     * Gets information about the currently applied discount&#10;     */&#10;    public String getCurrentDiscountInfo() {&#10;        if (active == null || activeDiscount == null) {&#10;            return &quot;No discount applied&quot;;&#10;        }&#10;&#10;        // For batch discounts, calculate the actual discount amount&#10;        if (&quot;BATCH_DISCOUNT&quot;.equals(activeDiscount.code())) {&#10;            Money actualDiscount = calculateActualBatchDiscountAmount();&#10;            return &quot;Current Discount: BATCH_DISCOUNTS (Saves: &quot; + actualDiscount + &quot;)&quot;;&#10;        }&#10;&#10;        // For other discount types, use the computed discount&#10;        Money discountAmount = activeDiscount.computeDiscount(active);&#10;        return &quot;Current Discount: &quot; + activeDiscount.code() + &quot; (Saves: &quot; + discountAmount + &quot;)&quot;;&#10;    }&#10;&#10;    /**&#10;     * Gets a list of all batch discounts for the current bill&#10;     */&#10;    public List&lt;String&gt; getAvailableDiscounts() {&#10;        if (active == null) {&#10;            return List.of(&quot;No active bill&quot;);&#10;        }&#10;&#10;        List&lt;String&gt; discountDescriptions = new ArrayList&lt;&gt;();&#10;&#10;        for (BillLine line : active.lines()) {&#10;            for (InventoryReservation reservation : line.reservations()) {&#10;                Optional&lt;BatchDiscount&gt; discount = inventoryAdmin.findActiveBatchDiscount(reservation.batchId);&#10;                if (discount.isPresent() &amp;&amp; discount.get().isValidNow()) {&#10;                    String description = String.format(&quot;%s: %s&quot;,&#10;                        line.itemName(),&#10;                        discount.get().getDescription());&#10;                    if (!discountDescriptions.contains(description)) {&#10;                        discountDescriptions.add(description);&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        if (discountDescriptions.isEmpty()) {&#10;            return List.of(&quot;No batch discounts available&quot;);&#10;        }&#10;&#10;        return discountDescriptions;&#10;    }&#10;&#10;    /**&#10;     * Gets the current bill with pricing information including discounts&#10;     */&#10;    public String getCurrentBillSummary() {&#10;        if (active == null) {&#10;            return &quot;No active bill&quot;;&#10;        }&#10;&#10;        // Apply current pricing to get up-to-date totals&#10;        pricing.finalizePricing(active, activeDiscount);&#10;&#10;        StringBuilder summary = new StringBuilder();&#10;        summary.append(&quot;=== CURRENT BILL ===\n&quot;);&#10;        summary.append(&quot;Bill No: &quot;).append(active.number()).append(&quot;\n&quot;);&#10;        summary.append(&quot;Items:\n&quot;);&#10;&#10;        for (BillLine line : active.lines()) {&#10;            summary.append(&quot;  &quot;).append(line.itemCode()).append(&quot; - &quot;)&#10;                   .append(line.itemName()).append(&quot; x&quot;).append(line.quantity())&#10;                   .append(&quot; @ &quot;).append(line.unitPrice()).append(&quot; = &quot;)&#10;                   .append(line.lineTotal()).append(&quot;\n&quot;);&#10;        }&#10;&#10;        summary.append(&quot;-------------------\n&quot;);&#10;        summary.append(&quot;Subtotal: &quot;).append(active.subtotal()).append(&quot;\n&quot;);&#10;        summary.append(&quot;Discount: -&quot;).append(active.discount()).append(&quot;\n&quot;);&#10;        summary.append(&quot;Tax: &quot;).append(active.tax()).append(&quot;\n&quot;);&#10;        summary.append(&quot;TOTAL: &quot;).append(active.total()).append(&quot;\n&quot;);&#10;&#10;        if (activeDiscount != null) {&#10;            summary.append(&quot;Applied Discount: &quot;).append(activeDiscount.code()).append(&quot;\n&quot;);&#10;        }&#10;&#10;        List&lt;String&gt; availableDiscounts = getAvailableDiscounts();&#10;        if (!availableDiscounts.isEmpty()) {&#10;            summary.append(&quot;Available Discounts:\n&quot;);&#10;            for (String discount : availableDiscounts) {&#10;                summary.append(&quot;  • &quot;).append(discount).append(&quot;\n&quot;);&#10;            }&#10;        }&#10;&#10;        return summary.toString();&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>