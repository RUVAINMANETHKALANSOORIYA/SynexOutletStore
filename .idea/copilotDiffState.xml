<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/presentation/cli/POSConsole.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/presentation/cli/POSConsole.java" />
              <option name="originalContent" value="package presentation.cli;&#10;&#10;import application.auth.AuthService;&#10;import application.auth.CustomerAuthService;&#10;import application.inventory.InventoryAdminService;&#10;import application.inventory.InventoryService;&#10;import application.inventory.RestockService;&#10;import application.pos.POSController;&#10;import application.reporting.ReportingService;&#10;import domain.common.Money;&#10;import domain.pricing.BogoPolicy;&#10;import domain.pricing.DiscountPolicy;&#10;import domain.pricing.PercentageDiscount;&#10;&#10;import java.time.LocalDate;&#10;import java.util.Locale;&#10;import java.util.Scanner;&#10;&#10;public final class POSConsole {&#10;    private final POSController pos;&#10;    private final ReportingService reports;&#10;    private final RestockService restock;&#10;    private final AuthService auth;&#10;    private final CustomerAuthService customerAuth;&#10;    private final InventoryAdminService admin;&#10;    private final InventoryService inv; // used for qty checks &amp; restock level&#10;&#10;    public POSConsole(POSController pos,&#10;                      ReportingService reports,&#10;                      RestockService restock,&#10;                      AuthService auth,&#10;                      CustomerAuthService customerAuth,&#10;                      InventoryAdminService admin,&#10;                      InventoryService inv) {&#10;        this.pos = pos;&#10;        this.reports = reports;&#10;        this.restock = restock;&#10;        this.auth = auth;&#10;        this.customerAuth = customerAuth;&#10;        this.admin = admin;&#10;        this.inv = inv;&#10;    }&#10;&#10;    public void run() {&#10;        Scanner sc = new Scanner(System.in);&#10;        sc.useLocale(Locale.US);&#10;&#10;        System.out.println(&quot;========================================&quot;);&#10;        System.out.println(&quot;   Synex Outlet Store - POS System&quot;);&#10;        System.out.println(&quot;========================================&quot;);&#10;&#10;        // -------- Login loop (cashier / staff) --------&#10;        while (!auth.isLoggedIn()) {&#10;            System.out.print(&quot;Username: &quot;);&#10;            String user = sc.nextLine().trim();&#10;            System.out.print(&quot;Password: &quot;);&#10;            String pass = sc.nextLine().trim();&#10;            if (auth.login(user, pass)) {&#10;                pos.setUser(user);&#10;                pos.setChannel(&quot;POS&quot;); // default channel on login&#10;                System.out.println(&quot;✅ Login successful! Welcome, &quot; + user + &quot;.&quot;);&#10;            } else {&#10;                System.out.println(&quot;❌ Login failed. Please try again.\n&quot;);&#10;            }&#10;        }&#10;&#10;        boolean running = true;&#10;        while (running) {&#10;            final String role = auth.currentUser().role(); // re-read each loop&#10;&#10;            System.out.println(&quot;\nMain Menu&quot;);&#10;            System.out.println(&quot;---------&quot;);&#10;            System.out.println(&quot;1. New POS Bill&quot;);&#10;            System.out.println(&quot;2. New ONLINE Order&quot;);&#10;            System.out.println(&quot;3. View Reports&quot;);&#10;            System.out.println(&quot;4. Restock&quot;);&#10;            if (&quot;INVENTORY_MANAGER&quot;.equalsIgnoreCase(role)) {&#10;                System.out.println(&quot;5. Inventory Manager&quot;);&#10;            }&#10;            System.out.println(&quot;0. Logout / Exit&quot;);&#10;            System.out.print(&quot;Choose an option: &quot;);&#10;            String choice = readLine(sc);&#10;&#10;            switch (choice) {&#10;                case &quot;1&quot; -&gt; billMenu(sc, &quot;POS&quot;);&#10;                case &quot;2&quot; -&gt; billMenu(sc, &quot;ONLINE&quot;);&#10;                case &quot;3&quot; -&gt; reportMenu(sc);&#10;                case &quot;4&quot; -&gt; restockMenu(sc);&#10;                case &quot;5&quot; -&gt; {&#10;                    if (&quot;INVENTORY_MANAGER&quot;.equalsIgnoreCase(role)) managerMenu(sc);&#10;                    else System.out.println(&quot;Invalid choice.&quot;);&#10;                }&#10;                case &quot;0&quot; -&gt; {&#10;                    auth.logout();&#10;                    System.out.println(&quot; Logged out. Goodbye!&quot;);&#10;                    running = false;&#10;                }&#10;                default -&gt; System.out.println(&quot;Invalid choice.&quot;);&#10;            }&#10;        }&#10;    }&#10;&#10;    // ================== BILL MENU ==================&#10;    private void billMenu(Scanner sc, String channel) {&#10;        try {&#10;            pos.setChannel(channel);&#10;&#10;            // ONLINE flow requires customer login/registration and card payment&#10;            if (&quot;ONLINE&quot;.equalsIgnoreCase(channel)) {&#10;                System.out.println(&quot;=== Customer Portal (ONLINE) ===&quot;);&#10;                boolean loggedIn = false;&#10;                while (!loggedIn) {&#10;                    System.out.println(&quot;1. Login&quot;);&#10;                    System.out.println(&quot;2. Register&quot;);&#10;                    System.out.println(&quot;0. Cancel&quot;);&#10;                    System.out.print(&quot;Choose: &quot;);&#10;                    String ch = readLine(sc);&#10;                    switch (ch) {&#10;                        case &quot;1&quot; -&gt; {&#10;                            System.out.print(&quot;Username: &quot;);&#10;                            String u = readLine(sc);&#10;                            System.out.print(&quot;Password: &quot;);&#10;                            String p = readLine(sc);&#10;                            if (customerAuth.login(u, p)) {&#10;                                System.out.println(&quot;✅ Customer login successful. Welcome &quot; + u + &quot;!&quot;);&#10;                                loggedIn = true;&#10;                            } else {&#10;                                System.out.println(&quot;❌ Login failed.&quot;);&#10;                            }&#10;                        }&#10;                        case &quot;2&quot; -&gt; {&#10;                            System.out.print(&quot;Choose Username: &quot;);&#10;                            String u = readLine(sc);&#10;                            System.out.print(&quot;Password: &quot;);&#10;                            String p = readLine(sc);&#10;                            System.out.print(&quot;Email: &quot;);&#10;                            String e = readLine(sc);&#10;                            if (customerAuth.register(u, p, e)) {&#10;                                System.out.println(&quot;✅ Registration successful. You can now log in.&quot;);&#10;                            } else {&#10;                                System.out.println(&quot;❌ Username already taken.&quot;);&#10;                            }&#10;                        }&#10;                        case &quot;0&quot; -&gt; { return; }&#10;                        default -&gt; System.out.println(&quot;Invalid.&quot;);&#10;                    }&#10;                }&#10;            }&#10;&#10;            pos.newBill();&#10;            boolean active = true;&#10;&#10;            while (active) {&#10;                System.out.println(&quot;\n--- New &quot; + channel.toUpperCase(Locale.ROOT) + &quot; Bill ---&quot;);&#10;                System.out.println(&quot;1. Add Item&quot;);&#10;                System.out.println(&quot;2. Remove Item&quot;);&#10;                System.out.println(&quot;3. Apply Discount&quot;);&#10;                System.out.println(&quot;4. Show Total&quot;);&#10;                System.out.println(&quot;5. Checkout&quot;);&#10;                System.out.println(&quot;0. Back to Main Menu&quot;);&#10;                System.out.print(&quot;Choose an option: &quot;);&#10;                String choice = readLine(sc);&#10;&#10;                switch (choice) {&#10;                    case &quot;1&quot; -&gt; {&#10;                        System.out.print(&quot;Enter Item Code: &quot;);&#10;                        String code = readLine(sc);&#10;                        System.out.print(&quot;Enter Quantity: &quot;);&#10;                        int qty = readInt(sc);&#10;&#10;                        // Try to add item for this channel&#10;                        pos.addItem(code, qty);&#10;                        System.out.println(&quot;✅ Item(s) added.&quot;);&#10;&#10;                        // Restock level notice&#10;                        try {&#10;                            int restock = inv.restockLevel(code);&#10;                            int remaining = inv.shelfQty(code) + inv.storeQty(code);&#10;                            if (remaining &lt;= restock) {&#10;                                System.out.println(&quot; This item hit or fell below the restock level (&quot; + restock + &quot;).&quot;);&#10;                            }&#10;                        } catch (Exception ignored) { }&#10;&#10;                        //  Auto top-up from MAIN when primary area is now empty&#10;                        try {&#10;                            if (&quot;POS&quot;.equalsIgnoreCase(channel)) {&#10;                                int storeLeft = inv.storeQty(code);&#10;                                if (storeLeft &lt;= 0) {&#10;                                    // store depleted → pull 100 from MAIN into STORE&#10;                                    admin.addBatch(code, null, 0, 100);&#10;                                    System.out.println(&quot; Store empty — auto top-up 100 from MAIN → STORE.&quot;);&#10;                                }&#10;                            } else {&#10;                                int shelfLeft = inv.shelfQty(code);&#10;                                if (shelfLeft &lt;= 0) {&#10;                                    // shelf depleted → pull 100 from MAIN onto SHELF&#10;                                    admin.addBatch(code, null, 100, 0);&#10;                                    System.out.println(&quot; Shelf empty — auto top-up 100 from MAIN → SHELF.&quot;);&#10;                                }&#10;                            }&#10;                        } catch (Exception e) {&#10;                            System.out.println(&quot;⚠️ Auto top-up failed: &quot; + e.getMessage());&#10;                        }&#10;                    }&#10;                    case &quot;2&quot; -&gt; {&#10;                        System.out.print(&quot;Enter Item Code to remove: &quot;);&#10;                        String code = readLine(sc);&#10;                        pos.removeItem(code);&#10;                        System.out.println(&quot;✅ Item removed.&quot;);&#10;                    }&#10;                    case &quot;3&quot; -&gt; applyDiscountMenu(sc);&#10;                    case &quot;4&quot; -&gt; {&#10;                        Money t = pos.total();&#10;                        System.out.println(&quot; Current Total: &quot; + t);&#10;                    }&#10;                    case &quot;5&quot; -&gt; {&#10;                        if (&quot;ONLINE&quot;.equalsIgnoreCase(channel)) {&#10;                            // Force card payment online&#10;                            Money due = pos.total();&#10;                            System.out.println(&quot;Amount due: &quot; + due);&#10;                            System.out.print(&quot;Card last 4 digits: &quot;);&#10;                            String last4 = readLine(sc);&#10;                            pos.checkoutCard(last4);&#10;                            System.out.println(&quot;✅ Online checkout complete (Card ****&quot; + last4 + &quot;).&quot;);&#10;                        } else {&#10;                            checkoutMenu(sc); // POS: cash or card&#10;                        }&#10;                        active = false; // done with this bill&#10;                    }&#10;                    case &quot;0&quot; -&gt; active = false;&#10;                    default -&gt; System.out.println(&quot;Invalid choice.&quot;);&#10;                }&#10;            }&#10;        } catch (Exception ex) {&#10;            System.out.println(&quot;⚠️ Error: &quot; + ex.getMessage());&#10;        }&#10;    }&#10;&#10;    private void applyDiscountMenu(Scanner sc) {&#10;        System.out.println(&quot;Choose Discount:&quot;);&#10;        System.out.println(&quot;1. Percentage&quot;);&#10;        System.out.println(&quot;2. BOGO (Buy One Get One)&quot;);&#10;        System.out.println(&quot;0. None&quot;);&#10;        System.out.print(&quot;Selection: &quot;);&#10;        String d = readLine(sc);&#10;&#10;        try {&#10;            DiscountPolicy p = null;&#10;            if (&quot;1&quot;.equals(d)) {&#10;                System.out.print(&quot;Enter percentage (0-100): &quot;);&#10;                int perc = readInt(sc);&#10;                p = new PercentageDiscount(perc);&#10;            } else if (&quot;2&quot;.equals(d)) {&#10;                p = new BogoPolicy();&#10;            }&#10;            pos.applyDiscount(p);&#10;            System.out.println(&quot;✅ Discount applied.&quot;);&#10;        } catch (Exception ex) {&#10;            System.out.println(&quot;⚠️ Error: &quot; + ex.getMessage());&#10;        }&#10;    }&#10;&#10;    private void checkoutMenu(Scanner sc) {&#10;        try {&#10;            Money due = pos.total();&#10;            System.out.println(&quot;Amount due: &quot; + due);&#10;            System.out.println(&quot;1. Pay by Cash&quot;);&#10;            System.out.println(&quot;2. Pay by Card&quot;);&#10;            System.out.println(&quot;0. Cancel&quot;);&#10;            System.out.print(&quot;Choose: &quot;);&#10;            String pay = readLine(sc);&#10;&#10;            switch (pay) {&#10;                case &quot;1&quot; -&gt; {&#10;                    System.out.print(&quot;Cash received: &quot;);&#10;                    double amt = readDouble(sc);&#10;                    pos.checkoutCash(amt);&#10;                    System.out.println(&quot;✅ Checkout complete (Cash).&quot;);&#10;                }&#10;                case &quot;2&quot; -&gt; {&#10;                    System.out.print(&quot;Card last 4 digits: &quot;);&#10;                    String last4 = readLine(sc);&#10;                    pos.checkoutCard(last4);&#10;                    System.out.println(&quot;✅ Checkout complete (Card ****&quot; + last4 + &quot;).&quot;);&#10;                }&#10;                case &quot;0&quot; -&gt; System.out.println(&quot;Cancelled.&quot;);&#10;                default -&gt; System.out.println(&quot;Invalid choice.&quot;);&#10;            }&#10;        } catch (Exception ex) {&#10;            System.out.println(&quot;⚠️ Error: &quot; + ex.getMessage());&#10;        }&#10;    }&#10;&#10;    // ================== REPORT MENU (expanded) ==================&#10;    private void reportMenu(Scanner sc) {&#10;        System.out.println(&quot;\n--- Reports ---&quot;);&#10;        System.out.println(&quot;1. Daily Sales&quot;);&#10;        System.out.println(&quot;2. Best Sellers&quot;);&#10;        System.out.println(&quot;3. Revenue Series&quot;);&#10;        System.out.println(&quot;4. Reshelving (toward shelf target)&quot;);&#10;        System.out.println(&quot;5. Reorder (below threshold)&quot;);&#10;        System.out.println(&quot;6. Stock by Batch&quot;);&#10;        System.out.println(&quot;7. Bills (range)&quot;);&#10;        System.out.println(&quot;0. Back&quot;);&#10;        System.out.print(&quot;Choose: &quot;);&#10;        String choice = readLine(sc);&#10;&#10;        try {&#10;            switch (choice) {&#10;                case &quot;1&quot; -&gt; {&#10;                    System.out.print(&quot;Enter date (yyyy-MM-dd): &quot;);&#10;                    reports.printDailySales(LocalDate.parse(readLine(sc)));&#10;                    System.out.println(&quot;✅ Printed to console.&quot;);&#10;                }&#10;                case &quot;2&quot; -&gt; {&#10;                    System.out.print(&quot;From date (yyyy-MM-dd): &quot;);&#10;                    LocalDate from = LocalDate.parse(readLine(sc));&#10;                    System.out.print(&quot;To date (yyyy-MM-dd): &quot;);&#10;                    LocalDate to = LocalDate.parse(readLine(sc));&#10;                    reports.printBestSellers(from, to, 10);&#10;                    System.out.println(&quot;✅ Printed to console.&quot;);&#10;                }&#10;                case &quot;3&quot; -&gt; {&#10;                    System.out.print(&quot;From date (yyyy-MM-dd): &quot;);&#10;                    LocalDate from = LocalDate.parse(readLine(sc));&#10;                    System.out.print(&quot;To date (yyyy-MM-dd): &quot;);&#10;                    LocalDate to = LocalDate.parse(readLine(sc));&#10;                    reports.printRevenueSeries(from, to);&#10;                    System.out.println(&quot;✅ Printed to console.&quot;);&#10;                }&#10;                case &quot;4&quot; -&gt; {&#10;                    System.out.print(&quot;Shelf target (e.g., 100): &quot;);&#10;                    int target = readInt(sc);&#10;                    reports.printReshelving(target);&#10;                    System.out.println(&quot;✅ Printed to console.&quot;);&#10;                }&#10;                case &quot;5&quot; -&gt; {&#10;                    System.out.print(&quot;Reorder threshold (e.g., 50): &quot;);&#10;                    int th = readInt(sc);&#10;                    reports.printReorder(th);&#10;                    System.out.println(&quot;✅ Printed to console.&quot;);&#10;                }&#10;                case &quot;6&quot; -&gt; {&#10;                    System.out.print(&quot;Filter by item code (blank for all): &quot;);&#10;                    String code = readLine(sc);&#10;                    if (code.isBlank()) code = null;&#10;                    reports.printStockByBatch(code);&#10;                    System.out.println(&quot;✅ Printed to console.&quot;);&#10;                }&#10;                case &quot;7&quot; -&gt; {&#10;                    System.out.print(&quot;From date (yyyy-MM-dd): &quot;);&#10;                    LocalDate from = LocalDate.parse(readLine(sc));&#10;                    System.out.print(&quot;To date (yyyy-MM-dd): &quot;);&#10;                    LocalDate to = LocalDate.parse(readLine(sc));&#10;                    reports.printBills(from, to);&#10;                    System.out.println(&quot;✅ Printed to console.&quot;);&#10;                }&#10;                case &quot;0&quot; -&gt; { /* back */ }&#10;                default -&gt; System.out.println(&quot;Invalid choice.&quot;);&#10;            }&#10;        } catch (Exception ex) {&#10;            System.out.println(&quot;⚠️ Error: &quot; + ex.getMessage());&#10;        }&#10;    }&#10;&#10;    // ================== RESTOCK MENU ==================&#10;    private void restockMenu(Scanner sc) {&#10;        System.out.println(&quot;\n--- Restock ---&quot;);&#10;        System.out.print(&quot;Enter item code: &quot;);&#10;        String code = readLine(sc);&#10;        try {&#10;            restock.restockToTarget(code, 100);&#10;            System.out.println(&quot;✅ Shelf topped up to 100 for &quot; + code);&#10;        } catch (Exception e) {&#10;            System.out.println(&quot;⚠️ Error: &quot; + e.getMessage());&#10;        }&#10;    }&#10;&#10;    // ================== MANAGER MENU (items + batches) ==================&#10;    private void managerMenu(Scanner sc) {&#10;        boolean loop = true;&#10;        while (loop) {&#10;            System.out.println(&quot;\n--- Inventory Manager ---&quot;);&#10;            System.out.println(&quot;Items (Catalog)&quot;);&#10;            System.out.println(&quot;  1. Add Item&quot;);&#10;            System.out.println(&quot;  2. Rename Item&quot;);&#10;            System.out.println(&quot;  3. Change Item Price&quot;);&#10;            System.out.println(&quot;  4. Delete Item&quot;);&#10;            System.out.println(&quot;Batches (Stock)&quot;);&#10;            System.out.println(&quot;  5. Add Batch&quot;);&#10;            System.out.println(&quot;  6. Edit Batch Quantities&quot;);&#10;            System.out.println(&quot;  7. Update Batch Expiry&quot;);&#10;            System.out.println(&quot;  8. Delete Batch&quot;);&#10;            System.out.println(&quot;  9. Move Store -&gt; Shelf (FEFO)&quot;);&#10;            System.out.println(&quot;0. Back&quot;);&#10;            System.out.print(&quot;Choose: &quot;);&#10;            String ch = readLine(sc);&#10;            try {&#10;                switch (ch) {&#10;                    // ---- Items ----&#10;                    case &quot;1&quot; -&gt; {&#10;                        System.out.print(&quot;Item code: &quot;);&#10;                        String code = readLine(sc);&#10;                        System.out.print(&quot;Name: &quot;);&#10;                        String name = readLine(sc);&#10;                        System.out.print(&quot;Unit price: &quot;);&#10;                        double p = readDouble(sc);&#10;                        admin.addNewItem(code, name, Money.of(p));&#10;                        System.out.println(&quot;✅ Item added.&quot;);&#10;                    }&#10;                    case &quot;2&quot; -&gt; {&#10;                        System.out.print(&quot;Item code: &quot;);&#10;                        String code = readLine(sc);&#10;                        System.out.print(&quot;New name: &quot;);&#10;                        String newName = readLine(sc);&#10;                        admin.renameItem(code, newName);&#10;                        System.out.println(&quot;✅ Item renamed.&quot;);&#10;                    }&#10;                    case &quot;3&quot; -&gt; {&#10;                        System.out.print(&quot;Item code: &quot;);&#10;                        String code = readLine(sc);&#10;                        System.out.print(&quot;New price: &quot;);&#10;                        double p = readDouble(sc);&#10;                        admin.changeItemPrice(code, Money.of(p));&#10;                        System.out.println(&quot;✅ Item price updated.&quot;);&#10;                    }&#10;                    case &quot;4&quot; -&gt; {&#10;                        System.out.print(&quot;Item code: &quot;);&#10;                        String code = readLine(sc);&#10;                        admin.deleteItem(code);&#10;                        System.out.println(&quot;✅ Item deleted.&quot;);&#10;                    }&#10;&#10;                    // ---- Batches ----&#10;                    case &quot;5&quot; -&gt; {&#10;                        System.out.print(&quot;Item code: &quot;); String code = readLine(sc);&#10;                        System.out.print(&quot;Expiry (yyyy-MM-dd or blank): &quot;); String s = readLine(sc);&#10;                        java.time.LocalDate exp = (s.isBlank() ? null : java.time.LocalDate.parse(s));&#10;                        System.out.print(&quot;Qty on SHELF: &quot;); int qs = readInt(sc);&#10;                        System.out.print(&quot;Qty in STORE: &quot;); int qst = readInt(sc);&#10;                        admin.addBatch(code, exp, qs, qst);&#10;                        System.out.println(&quot;✅ Batch added.&quot;);&#10;                    }&#10;                    case &quot;6&quot; -&gt; {&#10;                        System.out.print(&quot;Batch ID: &quot;); long id = Long.parseLong(readLine(sc));&#10;                        System.out.print(&quot;New Qty on SHELF: &quot;); int qs = readInt(sc);&#10;                        System.out.print(&quot;New Qty in STORE: &quot;); int qst = readInt(sc);&#10;                        admin.editBatchQuantities(id, qs, qst);&#10;                        System.out.println(&quot;✅ Batch quantities updated.&quot;);&#10;                    }&#10;                    case &quot;7&quot; -&gt; {&#10;                        System.out.print(&quot;Batch ID: &quot;); long id = Long.parseLong(readLine(sc));&#10;                        System.out.print(&quot;New expiry (yyyy-MM-dd or blank to clear): &quot;); String s = readLine(sc);&#10;                        java.time.LocalDate exp = (s.isBlank() ? null : java.time.LocalDate.parse(s));&#10;                        admin.updateBatchExpiry(id, exp);&#10;                        System.out.println(&quot;✅ Batch expiry updated.&quot;);&#10;                    }&#10;                    case &quot;8&quot; -&gt; {&#10;                        System.out.print(&quot;Batch ID: &quot;); long id = Long.parseLong(readLine(sc));&#10;                        admin.deleteBatch(id);&#10;                        System.out.println(&quot;✅ Batch deleted.&quot;);&#10;                    }&#10;                    case &quot;9&quot; -&gt; {&#10;                        System.out.print(&quot;Item code: &quot;); String code = readLine(sc);&#10;                        System.out.print(&quot;Qty to move from STORE to SHELF: &quot;); int q = readInt(sc);&#10;                        admin.moveStoreToShelfFEFO(code, q);&#10;                        System.out.println(&quot;✅ Moved &quot; + q + &quot; (STORE -&gt; SHELF) FEFO.&quot;);&#10;                    }&#10;                    case &quot;0&quot; -&gt; loop = false;&#10;                    default -&gt; System.out.println(&quot;Invalid choice.&quot;);&#10;                }&#10;            } catch (Exception ex) {&#10;                System.out.println(&quot;⚠️ Error: &quot; + ex.getMessage());&#10;            }&#10;        }&#10;    }&#10;&#10;    // -------- Helpers for safe input --------&#10;    private static String readLine(Scanner sc) {&#10;        String s = sc.nextLine();&#10;        while (s != null &amp;&amp; s.isEmpty() &amp;&amp; sc.hasNextLine()) {&#10;            s = sc.nextLine();&#10;        }&#10;        return s == null ? &quot;&quot; : s.trim();&#10;    }&#10;&#10;    private static int readInt(Scanner sc) {&#10;        while (true) {&#10;            String s = readLine(sc);&#10;            try { return Integer.parseInt(s); }&#10;            catch (NumberFormatException e) { System.out.print(&quot;Enter a number: &quot;); }&#10;        }&#10;    }&#10;&#10;    private static double readDouble(Scanner sc) {&#10;        while (true) {&#10;            String s = readLine(sc);&#10;            try { return Double.parseDouble(s); }&#10;            catch (NumberFormatException e) { System.out.print(&quot;Enter a valid amount: &quot;); }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package presentation.cli;&#10;&#10;import application.auth.AuthService;&#10;import application.auth.CustomerAuthService;&#10;import application.inventory.InventoryAdminService;&#10;import application.inventory.InventoryService;&#10;import application.inventory.RestockService;&#10;import application.pos.POSController;&#10;import application.reporting.ReportingService;&#10;import domain.common.Money;&#10;import domain.pricing.BogoPolicy;&#10;import domain.pricing.DiscountPolicy;&#10;import domain.pricing.PercentageDiscount;&#10;&#10;import java.time.LocalDate;&#10;import java.util.Locale;&#10;import java.util.Scanner;&#10;&#10;public final class POSConsole {&#10;    private final POSController pos;&#10;    private final ReportingService reports;&#10;    private final RestockService restock;&#10;    private final AuthService auth;&#10;    private final CustomerAuthService customerAuth;&#10;    private final InventoryAdminService admin;&#10;    private final InventoryService inv; // used for qty checks &amp; restock level&#10;&#10;    public POSConsole(POSController pos,&#10;                      ReportingService reports,&#10;                      RestockService restock,&#10;                      AuthService auth,&#10;                      CustomerAuthService customerAuth,&#10;                      InventoryAdminService admin,&#10;                      InventoryService inv) {&#10;        this.pos = pos;&#10;        this.reports = reports;&#10;        this.restock = restock;&#10;        this.auth = auth;&#10;        this.customerAuth = customerAuth;&#10;        this.admin = admin;&#10;        this.inv = inv;&#10;    }&#10;&#10;    public void run() {&#10;        Scanner sc = new Scanner(System.in);&#10;        sc.useLocale(Locale.US);&#10;&#10;        System.out.println(&quot;========================================&quot;);&#10;        System.out.println(&quot;   Synex Outlet Store - POS System&quot;);&#10;        System.out.println(&quot;========================================&quot;);&#10;&#10;        // -------- Login loop (cashier / staff) --------&#10;        while (!auth.isLoggedIn()) {&#10;            System.out.print(&quot;Username: &quot;);&#10;            String user = sc.nextLine().trim();&#10;            System.out.print(&quot;Password: &quot;);&#10;            String pass = sc.nextLine().trim();&#10;            if (auth.login(user, pass)) {&#10;                pos.setUser(user);&#10;                pos.setChannel(&quot;POS&quot;); // default channel on login&#10;                System.out.println(&quot;✅ Login successful! Welcome, &quot; + user + &quot;.&quot;);&#10;            } else {&#10;                System.out.println(&quot;❌ Login failed. Please try again.\n&quot;);&#10;            }&#10;        }&#10;&#10;        boolean running = true;&#10;        while (running) {&#10;            final String role = auth.currentUser().role(); // re-read each loop&#10;&#10;            System.out.println(&quot;\nMain Menu&quot;);&#10;            System.out.println(&quot;---------&quot;);&#10;            System.out.println(&quot;1. New POS Bill&quot;);&#10;            System.out.println(&quot;2. New ONLINE Order&quot;);&#10;            System.out.println(&quot;3. View Reports&quot;);&#10;            System.out.println(&quot;4. Restock&quot;);&#10;            if (&quot;INVENTORY_MANAGER&quot;.equalsIgnoreCase(role)) {&#10;                System.out.println(&quot;5. Inventory Manager&quot;);&#10;            }&#10;            System.out.println(&quot;0. Logout / Exit&quot;);&#10;            System.out.print(&quot;Choose an option: &quot;);&#10;            String choice = readLine(sc);&#10;&#10;            switch (choice) {&#10;                case &quot;1&quot; -&gt; billMenu(sc, &quot;POS&quot;);&#10;                case &quot;2&quot; -&gt; billMenu(sc, &quot;ONLINE&quot;);&#10;                case &quot;3&quot; -&gt; reportMenu(sc);&#10;                case &quot;4&quot; -&gt; restockMenu(sc);&#10;                case &quot;5&quot; -&gt; {&#10;                    if (&quot;INVENTORY_MANAGER&quot;.equalsIgnoreCase(role)) managerMenu(sc);&#10;                    else System.out.println(&quot;Invalid choice.&quot;);&#10;                }&#10;                case &quot;0&quot; -&gt; {&#10;                    auth.logout();&#10;                    System.out.println(&quot; Logged out. Goodbye!&quot;);&#10;                    running = false;&#10;                }&#10;                default -&gt; System.out.println(&quot;Invalid choice.&quot;);&#10;            }&#10;        }&#10;    }&#10;&#10;    // ================== BILL MENU ==================&#10;    private void billMenu(Scanner sc, String channel) {&#10;        try {&#10;            pos.setChannel(channel);&#10;&#10;            // ONLINE flow requires customer login/registration and card payment&#10;            if (&quot;ONLINE&quot;.equalsIgnoreCase(channel)) {&#10;                System.out.println(&quot;=== Customer Portal (ONLINE) ===&quot;);&#10;                boolean loggedIn = false;&#10;                while (!loggedIn) {&#10;                    System.out.println(&quot;1. Login&quot;);&#10;                    System.out.println(&quot;2. Register&quot;);&#10;                    System.out.println(&quot;0. Cancel&quot;);&#10;                    System.out.print(&quot;Choose: &quot;);&#10;                    String ch = readLine(sc);&#10;                    switch (ch) {&#10;                        case &quot;1&quot; -&gt; {&#10;                            System.out.print(&quot;Username: &quot;);&#10;                            String u = readLine(sc);&#10;                            System.out.print(&quot;Password: &quot;);&#10;                            String p = readLine(sc);&#10;                            if (customerAuth.login(u, p)) {&#10;                                System.out.println(&quot;✅ Customer login successful. Welcome &quot; + u + &quot;!&quot;);&#10;                                loggedIn = true;&#10;                            } else {&#10;                                System.out.println(&quot;❌ Login failed.&quot;);&#10;                            }&#10;                        }&#10;                        case &quot;2&quot; -&gt; {&#10;                            System.out.print(&quot;Choose Username: &quot;);&#10;                            String u = readLine(sc);&#10;                            System.out.print(&quot;Password: &quot;);&#10;                            String p = readLine(sc);&#10;                            System.out.print(&quot;Email: &quot;);&#10;                            String e = readLine(sc);&#10;                            if (customerAuth.register(u, p, e)) {&#10;                                System.out.println(&quot;✅ Registration successful. You can now log in.&quot;);&#10;                            } else {&#10;                                System.out.println(&quot;❌ Username already taken.&quot;);&#10;                            }&#10;                        }&#10;                        case &quot;0&quot; -&gt; { return; }&#10;                        default -&gt; System.out.println(&quot;Invalid.&quot;);&#10;                    }&#10;                }&#10;            }&#10;&#10;            pos.newBill();&#10;            boolean active = true;&#10;&#10;            while (active) {&#10;                System.out.println(&quot;\n--- New &quot; + channel.toUpperCase(Locale.ROOT) + &quot; Bill ---&quot;);&#10;                System.out.println(&quot;1. Add Item&quot;);&#10;                System.out.println(&quot;2. Remove Item&quot;);&#10;                System.out.println(&quot;3. Apply Discount&quot;);&#10;                System.out.println(&quot;4. Show Total&quot;);&#10;                System.out.println(&quot;5. Checkout&quot;);&#10;                System.out.println(&quot;0. Back to Main Menu&quot;);&#10;                System.out.print(&quot;Choose an option: &quot;);&#10;                String choice = readLine(sc);&#10;&#10;                switch (choice) {&#10;                    case &quot;1&quot; -&gt; {&#10;                        System.out.print(&quot;Enter Item Code: &quot;);&#10;                        String code = readLine(sc);&#10;                        System.out.print(&quot;Enter Quantity: &quot;);&#10;                        int qty = readInt(sc);&#10;&#10;                        // Try to add item for this channel&#10;                        pos.addItem(code, qty);&#10;                        System.out.println(&quot;✅ Item(s) added.&quot;);&#10;&#10;                        // Restock level notice&#10;                        try {&#10;                            int restock = inv.restockLevel(code);&#10;                            int remaining = inv.shelfQty(code) + inv.storeQty(code);&#10;                            if (remaining &lt;= restock) {&#10;                                System.out.println(&quot; This item hit or fell below the restock level (&quot; + restock + &quot;).&quot;);&#10;                            }&#10;                        } catch (Exception ignored) { }&#10;&#10;                        //  Auto top-up from MAIN when primary area is now empty&#10;                        try {&#10;                            if (&quot;POS&quot;.equalsIgnoreCase(channel)) {&#10;                                int storeLeft = inv.storeQty(code);&#10;                                if (storeLeft &lt;= 0) {&#10;                                    // store depleted → pull 100 from MAIN into STORE&#10;                                    admin.addBatch(code, null, 0, 100);&#10;                                    System.out.println(&quot; Store empty — auto top-up 100 from MAIN → STORE.&quot;);&#10;                                }&#10;                            } else {&#10;                                int shelfLeft = inv.shelfQty(code);&#10;                                if (shelfLeft &lt;= 0) {&#10;                                    // shelf depleted → pull 100 from MAIN onto SHELF&#10;                                    admin.addBatch(code, null, 100, 0);&#10;                                    System.out.println(&quot; Shelf empty — auto top-up 100 from MAIN → SHELF.&quot;);&#10;                                }&#10;                            }&#10;                        } catch (Exception e) {&#10;                            System.out.println(&quot;⚠️ Auto top-up failed: &quot; + e.getMessage());&#10;                        }&#10;                    }&#10;                    case &quot;2&quot; -&gt; {&#10;                        System.out.print(&quot;Enter Item Code to remove: &quot;);&#10;                        String code = readLine(sc);&#10;                        pos.removeItem(code);&#10;                        System.out.println(&quot;✅ Item removed.&quot;);&#10;                    }&#10;                    case &quot;3&quot; -&gt; applyDiscountMenu(sc);&#10;                    case &quot;4&quot; -&gt; {&#10;                        Money t = pos.total();&#10;                        System.out.println(&quot; Current Total: &quot; + t);&#10;                    }&#10;                    case &quot;5&quot; -&gt; {&#10;                        if (&quot;ONLINE&quot;.equalsIgnoreCase(channel)) {&#10;                            // Force card payment online&#10;                            Money due = pos.total();&#10;                            System.out.println(&quot;Amount due: &quot; + due);&#10;                            System.out.print(&quot;Card last 4 digits: &quot;);&#10;                            String last4 = readLine(sc);&#10;                            pos.checkoutCard(last4);&#10;                            System.out.println(&quot;✅ Online checkout complete (Card ****&quot; + last4 + &quot;).&quot;);&#10;                        } else {&#10;                            checkoutMenu(sc); // POS: cash or card&#10;                        }&#10;                        active = false; // done with this bill&#10;                    }&#10;                    case &quot;0&quot; -&gt; active = false;&#10;                    default -&gt; System.out.println(&quot;Invalid choice.&quot;);&#10;                }&#10;            }&#10;        } catch (Exception ex) {&#10;            System.out.println(&quot;⚠️ Error: &quot; + ex.getMessage());&#10;        }&#10;    }&#10;&#10;    private void applyDiscountMenu(Scanner sc) {&#10;        System.out.println(&quot;Choose Discount:&quot;);&#10;        System.out.println(&quot;1. Percentage&quot;);&#10;        System.out.println(&quot;2. BOGO (Buy One Get One)&quot;);&#10;        System.out.println(&quot;0. None&quot;);&#10;        System.out.print(&quot;Selection: &quot;);&#10;        String d = readLine(sc);&#10;&#10;        try {&#10;            DiscountPolicy p = null;&#10;            if (&quot;1&quot;.equals(d)) {&#10;                System.out.print(&quot;Enter percentage (0-100): &quot;);&#10;                int perc = readInt(sc);&#10;                p = new PercentageDiscount(perc);&#10;            } else if (&quot;2&quot;.equals(d)) {&#10;                p = new BogoPolicy();&#10;            }&#10;            pos.applyDiscount(p);&#10;            System.out.println(&quot;✅ Discount applied.&quot;);&#10;        } catch (Exception ex) {&#10;            System.out.println(&quot;⚠️ Error: &quot; + ex.getMessage());&#10;        }&#10;    }&#10;&#10;    private void checkoutMenu(Scanner sc) {&#10;        try {&#10;            Money due = pos.total();&#10;            System.out.println(&quot;Amount due: &quot; + due);&#10;            System.out.println(&quot;1. Pay by Cash&quot;);&#10;            System.out.println(&quot;2. Pay by Card&quot;);&#10;            System.out.println(&quot;0. Cancel&quot;);&#10;            System.out.print(&quot;Choose: &quot;);&#10;            String pay = readLine(sc);&#10;&#10;            switch (pay) {&#10;                case &quot;1&quot; -&gt; {&#10;                    System.out.print(&quot;Cash received: &quot;);&#10;                    double amt = readDouble(sc);&#10;                    pos.checkoutCash(amt);&#10;                    System.out.println(&quot;✅ Checkout complete (Cash).&quot;);&#10;                }&#10;                case &quot;2&quot; -&gt; {&#10;                    System.out.print(&quot;Card last 4 digits: &quot;);&#10;                    String last4 = readLine(sc);&#10;                    pos.checkoutCard(last4);&#10;                    System.out.println(&quot;✅ Checkout complete (Card ****&quot; + last4 + &quot;).&quot;);&#10;                }&#10;                case &quot;0&quot; -&gt; System.out.println(&quot;Cancelled.&quot;);&#10;                default -&gt; System.out.println(&quot;Invalid choice.&quot;);&#10;            }&#10;        } catch (Exception ex) {&#10;            System.out.println(&quot;⚠️ Error: &quot; + ex.getMessage());&#10;        }&#10;    }&#10;&#10;    // ================== REPORT MENU (expanded) ==================&#10;    private void reportMenu(Scanner sc) {&#10;        System.out.println(&quot;\n--- Reports ---&quot;);&#10;        System.out.println(&quot;1. Daily Sales&quot;);&#10;        System.out.println(&quot;2. Best Sellers&quot;);&#10;        System.out.println(&quot;3. Revenue Series&quot;);&#10;        System.out.println(&quot;4. Reshelving (toward shelf target)&quot;);&#10;        System.out.println(&quot;5. Reorder (below threshold)&quot;);&#10;        System.out.println(&quot;6. Stock by Batch&quot;);&#10;        System.out.println(&quot;7. Bills (range)&quot;);&#10;        System.out.println(&quot;0. Back&quot;);&#10;        System.out.print(&quot;Choose: &quot;);&#10;        String choice = readLine(sc);&#10;&#10;        try {&#10;            switch (choice) {&#10;                case &quot;1&quot; -&gt; {&#10;                    System.out.print(&quot;Enter date (yyyy-MM-dd): &quot;);&#10;                    reports.printDailySales(LocalDate.parse(readLine(sc)));&#10;                    System.out.println(&quot;✅ Printed to console.&quot;);&#10;                }&#10;                case &quot;2&quot; -&gt; {&#10;                    System.out.print(&quot;From date (yyyy-MM-dd): &quot;);&#10;                    LocalDate from = LocalDate.parse(readLine(sc));&#10;                    System.out.print(&quot;To date (yyyy-MM-dd): &quot;);&#10;                    LocalDate to = LocalDate.parse(readLine(sc));&#10;                    reports.printBestSellers(from, to, 10);&#10;                    System.out.println(&quot;✅ Printed to console.&quot;);&#10;                }&#10;                case &quot;3&quot; -&gt; {&#10;                    System.out.print(&quot;From date (yyyy-MM-dd): &quot;);&#10;                    LocalDate from = LocalDate.parse(readLine(sc));&#10;                    System.out.print(&quot;To date (yyyy-MM-dd): &quot;);&#10;                    LocalDate to = LocalDate.parse(readLine(sc));&#10;                    reports.printRevenueSeries(from, to);&#10;                    System.out.println(&quot;✅ Printed to console.&quot;);&#10;                }&#10;                case &quot;4&quot; -&gt; {&#10;                    System.out.print(&quot;Shelf target (e.g., 100): &quot;);&#10;                    int target = readInt(sc);&#10;                    reports.printReshelving(target);&#10;                    System.out.println(&quot;✅ Printed to console.&quot;);&#10;                }&#10;                case &quot;5&quot; -&gt; {&#10;                    System.out.print(&quot;Reorder threshold (e.g., 50): &quot;);&#10;                    int th = readInt(sc);&#10;                    reports.printReorder(th);&#10;                    System.out.println(&quot;✅ Printed to console.&quot;);&#10;                }&#10;                case &quot;6&quot; -&gt; {&#10;                    System.out.print(&quot;Filter by item code (blank for all): &quot;);&#10;                    String code = readLine(sc);&#10;                    if (code.isBlank()) code = null;&#10;                    reports.printStockByBatch(code);&#10;                    System.out.println(&quot;✅ Printed to console.&quot;);&#10;                }&#10;                case &quot;7&quot; -&gt; {&#10;                    System.out.print(&quot;From date (yyyy-MM-dd): &quot;);&#10;                    LocalDate from = LocalDate.parse(readLine(sc));&#10;                    System.out.print(&quot;To date (yyyy-MM-dd): &quot;);&#10;                    LocalDate to = LocalDate.parse(readLine(sc));&#10;                    reports.printBills(from, to);&#10;                    System.out.println(&quot;✅ Printed to console.&quot;);&#10;                }&#10;                case &quot;0&quot; -&gt; { /* back */ }&#10;                default -&gt; System.out.println(&quot;Invalid choice.&quot;);&#10;            }&#10;        } catch (Exception ex) {&#10;            System.out.println(&quot;⚠️ Error: &quot; + ex.getMessage());&#10;        }&#10;    }&#10;&#10;    // ================== RESTOCK MENU ==================&#10;    private void restockMenu(Scanner sc) {&#10;        System.out.println(&quot;\n--- Restock ---&quot;);&#10;        System.out.print(&quot;Enter item code: &quot;);&#10;        String code = readLine(sc);&#10;        try {&#10;            restock.restockToTarget(code, 100);&#10;            System.out.println(&quot;✅ Shelf topped up to 100 for &quot; + code);&#10;        } catch (Exception e) {&#10;            System.out.println(&quot;⚠️ Error: &quot; + e.getMessage());&#10;        }&#10;    }&#10;&#10;    // ================== MANAGER MENU ==================&#10;    private void managerMenu(Scanner sc) {&#10;        boolean loop = true;&#10;        while (loop) {&#10;            System.out.println(&quot;\n--- Inventory Manager ---&quot;);&#10;            System.out.println(&quot;1. Add Batch&quot;);&#10;            System.out.println(&quot;2. Edit Batch Quantities&quot;);&#10;            System.out.println(&quot;3. Update Batch Expiry&quot;);&#10;            System.out.println(&quot;4. Delete Batch&quot;);&#10;            System.out.println(&quot;5. Move Store -&gt; Shelf (FEFO)&quot;);&#10;            System.out.println(&quot;0. Back&quot;);&#10;            System.out.print(&quot;Choose: &quot;);&#10;            String ch = readLine(sc);&#10;            try {&#10;                switch (ch) {&#10;                    case &quot;1&quot; -&gt; {&#10;                        System.out.print(&quot;Item code: &quot;); String code = readLine(sc);&#10;                        System.out.print(&quot;Expiry (yyyy-MM-dd or blank): &quot;); String s = readLine(sc);&#10;                        java.time.LocalDate exp = (s.isBlank() ? null : java.time.LocalDate.parse(s));&#10;                        System.out.print(&quot;Qty on SHELF: &quot;); int qs = readInt(sc);&#10;                        System.out.print(&quot;Qty in STORE: &quot;); int qst = readInt(sc);&#10;                        admin.addBatch(code, exp, qs, qst);&#10;                        System.out.println(&quot;✅ Batch added.&quot;);&#10;                    }&#10;                    case &quot;2&quot; -&gt; {&#10;                        System.out.print(&quot;Batch ID: &quot;); long id = Long.parseLong(readLine(sc));&#10;                        System.out.print(&quot;New Qty on SHELF: &quot;); int qs = readInt(sc);&#10;                        System.out.print(&quot;New Qty in STORE: &quot;); int qst = readInt(sc);&#10;                        admin.editBatchQuantities(id, qs, qst);&#10;                        System.out.println(&quot;✅ Batch quantities updated.&quot;);&#10;                    }&#10;                    case &quot;3&quot; -&gt; {&#10;                        System.out.print(&quot;Batch ID: &quot;); long id = Long.parseLong(readLine(sc));&#10;                        System.out.print(&quot;New expiry (yyyy-MM-dd or blank to clear): &quot;); String s = readLine(sc);&#10;                        java.time.LocalDate exp = (s.isBlank() ? null : java.time.LocalDate.parse(s));&#10;                        admin.updateBatchExpiry(id, exp);&#10;                        System.out.println(&quot;✅ Batch expiry updated.&quot;);&#10;                    }&#10;                    case &quot;4&quot; -&gt; {&#10;                        System.out.print(&quot;Batch ID: &quot;); long id = Long.parseLong(readLine(sc));&#10;                        admin.deleteBatch(id);&#10;                        System.out.println(&quot;✅ Batch deleted.&quot;);&#10;                    }&#10;                    case &quot;5&quot; -&gt; {&#10;                        System.out.print(&quot;Item code: &quot;); String code = readLine(sc);&#10;                        System.out.print(&quot;Qty to move from STORE to SHELF: &quot;); int q = readInt(sc);&#10;                        admin.moveStoreToShelfFEFO(code, q);&#10;                        System.out.println(&quot;✅ Moved &quot; + q + &quot; (STORE -&gt; SHELF) FEFO.&quot;);&#10;                    }&#10;                    case &quot;0&quot; -&gt; loop = false;&#10;                    default -&gt; System.out.println(&quot;Invalid choice.&quot;);&#10;                }&#10;            } catch (Exception ex) {&#10;                System.out.println(&quot;⚠️ Error: &quot; + ex.getMessage());&#10;            }&#10;        }&#10;    }&#10;&#10;    // -------- Helpers for safe input --------&#10;    private static String readLine(Scanner sc) {&#10;        String s = sc.nextLine();&#10;        while (s != null &amp;&amp; s.isEmpty() &amp;&amp; sc.hasNextLine()) {&#10;            s = sc.nextLine();&#10;        }&#10;        return s == null ? &quot;&quot; : s.trim();&#10;    }&#10;&#10;    private static int readInt(Scanner sc) {&#10;        while (true) {&#10;            String s = readLine(sc);&#10;            try { return Integer.parseInt(s); }&#10;            catch (NumberFormatException e) { System.out.print(&quot;Enter a number: &quot;); }&#10;        }&#10;    }&#10;&#10;    private static double readDouble(Scanner sc) {&#10;        while (true) {&#10;            String s = readLine(sc);&#10;            try { return Double.parseDouble(s); }&#10;            catch (NumberFormatException e) { System.out.print(&quot;Enter a valid amount: &quot;); }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>